Given a N x M grid. Find All possible paths from top left to bottom right.From each cell you can either move only to right or down.

Example 1:

Input: 1 2 3
       4 5 6
Output: 1 4 5 6
        1 2 5 6 
        1 2 3 6
Explanation: We can see that there are 3 
paths from the cell (0,0) to (1,2).
Example 2:

Input: 1 2
       3 4
Output: 1 2 4
        1 3 4
Your Task:
You don't need to read input or print anything. Your task is to complete the function findAllPossiblePaths() which takes two integers n,m and grid[][]  as input parameters and returns all possible paths from the top left cell to bottom right cell in a 2d array.

Expected Time Complexity: O(2^N*M)

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution
{
public:
void findPaths(vector<vector<int>>& grid, int row, int col, vector<int>& path, vector<vector<int>>& result) {
    int n = grid.size();
    int m = grid[0].size();

    if (row == n - 1 && col == m - 1) {
        result.push_back(path);
        return;
    }

    if (row + 1 < n) {
        path.push_back(grid[row + 1][col]);
        findPaths(grid, row + 1, col, path, result);
        path.pop_back();
    }

    if (col + 1 < m) {
        path.push_back(grid[row][col + 1]);
        findPaths(grid, row, col + 1, path, result);
        path.pop_back();
    }
}

vector<vector<int>> findAllPossiblePaths(int n, int m, vector<vector<int>>& grid) {
    vector<int> path;
    vector<vector<int>> result;

    path.push_back(grid[0][0]);
    findPaths(grid, 0, 0, path, result);

    return result;
}

int main() {
    vector<vector<int>> grid1 = {{1, 2, 3}, {4, 5, 6}};
    int n1 = 2, m1 = 3;
    vector<vector<int>> result1 = findAllPossiblePaths(n1, m1, grid1);
    for (auto path : result1) {
        for (int num : path) {
            cout << num << " ";
        }
        cout << endl;
    }

    vector<vector<int>> grid2 = {{1, 2}, {3, 4}};
    int n2 = 2, m2 = 2;
    vector<vector<int>> result2 = findAllPossiblePaths(n2, m2, grid2);
    for (auto path : result2) {
        for (int num : path) {
            cout << num << " ";
        }
        cout << endl;
    }

    return 0;
}
