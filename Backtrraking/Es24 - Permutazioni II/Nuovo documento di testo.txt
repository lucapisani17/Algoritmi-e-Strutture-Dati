complex O(n!)

#include <stdio.h>
#include <stdlib.h>

// Funzione ausiliaria per scambiare due elementi di un array
void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Funzione ricorsiva di backtracking per generare le permutazioni uniche
void backtrack(int* nums, int numsSize, int** result, int* returnSize, int index) {
    if (index == numsSize) {
        result[*returnSize] = (int*)malloc(numsSize * sizeof(int));
        for (int i = 0; i < numsSize; i++) {
            result[*returnSize][i] = nums[i];
        }
        (*returnSize)++;
        return;
    }

    for (int i = index; i < numsSize; i++) {
        if (i != index && nums[i] == nums[index]) continue; // Evita duplicati
        swap(&nums[i], &nums[index]);
        backtrack(nums, numsSize, result, returnSize, index + 1);
        swap(&nums[i], &nums[index]);
    }
}

int** permuteUnique(int* nums, int numsSize, int* returnSize) {
    int** result = (int**)malloc(1000 * sizeof(int*));
    *returnSize = 0;

    backtrack(nums, numsSize, result, returnSize, 0);

    return result;
}

int main() {
    int nums[] = {1, 1, 2};
    int numsSize = 3;
    int returnSize;

    int** result = permuteUnique(nums, numsSize, &returnSize);

    printf("Output:\n");
    for (int i = 0; i < returnSize; i++) {
        printf("[");
        for (int j = 0; j < numsSize; j++) {
            printf("%d", result[i][j]);
            if (j < numsSize - 1) {
                printf(",");
            }
        }
        printf("]\n");
        free(result[i]);
    }

    free(result);

    return 0;
}
