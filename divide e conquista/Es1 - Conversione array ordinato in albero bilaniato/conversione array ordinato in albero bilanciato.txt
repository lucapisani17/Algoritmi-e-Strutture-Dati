//USA L'APPROCCIO DIVIDE ET IMPERA. sE VEDE DAL FATTO CHE DIVIDE I DUE ARRAY E RICHIAMA LA FUNZIONE IN MODO RICORSIVO SULLE DUE METÁ  --> complessitá O(n)
//DIFFICOLTÁ DI QUESTO ESERCIZIO: CAPIRE COME SI CONVERTE UN ARRAY !!!!ORDINATO!!!! IN UN ALBERO BINARIO DI RICERCA BILANCIATO

// TRACCIA = VEDI DOC ALLEGATO


// Definizione della struttura del nodo
 struct TreeNode {
    int val;
    struct TreeNode* left;
    struct TreeNode* right;
};

// Funzione per creare un nuovo nodo
struct TreeNode* new_node(int val) {
    struct TreeNode* node = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    node->val = val;
    node->left = NULL;
    node->right = NULL;
    return node;
}

// Funzione per convertire l'array ordinato in un BST
struct TreeNode* sorted_array_to_bst(int* nums, int start, int end) {
    if (start > end)
        return NULL //verifico che l'array non sia nullo

    int mid = (start + end) / 2; //trovo il punto medio dell'array che sará la mia radice 
    struct TreeNode* root = new_node(nums[mid]);

    root->left = sorted_array_to_bst(nums, start, mid - 1); // attacco alla nuova radice i sottoalberi di destra e sinistra richiamando la funzione di conversione
    //lo start dell array di sinistrasará sempre il primo, mentre end sará l 'elemento prima di quello nel punto medio, quindi mid-1. Viceverse mid+1 sará 
    //lo start per l'array di destra
    root->right = sorted_array_to_bst(nums, mid + 1, end);

    return root;
}

/* Funzione per eseguire una visita in ordine dell'albero non necessaria
void inorder_traversal(struct TreeNode* node) {
    if (node == NULL)
        return;

    inorder_traversal(node->left);
    printf("%d ", node->val);
    inorder_traversal(node->right);
}*/

int main() {
    int nums1[] = {-10, -3, 0, 5, 9};
    int size1 = sizeof(nums1) / sizeof(nums1[0]); //ricavo la dimensione dell'array 

    struct TreeNode* tree1 = sorted_array_to_bst(nums1, 0, size1 - 1); //costruisco l'albero richiamando la funzione chiave che costruirá i nodi, la radice ecc. Poi lo stampo
    inorder_traversal(tree1);
    printf("\n");

    int nums2[] = {1, 3};
    int size2 = sizeof(nums2) / sizeof(nums2[0]);

    struct TreeNode* tree2 = sorted_array_to_bst(nums2, 0, size2 - 1);
    inorder_traversal(tree2);
    printf("\n");

    return 0;
}


