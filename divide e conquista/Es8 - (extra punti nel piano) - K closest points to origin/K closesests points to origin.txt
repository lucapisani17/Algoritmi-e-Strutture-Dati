//TRACCIA = Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).
The distance between two points on the X-Y plane is the Euclidean distance (i.e., √(x1 - x2)2 + (y1 - y2)2).
You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in)

// approccio divide e timpera sotto, complessitá O(n)


/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */


#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// Definizione di una struttura per rappresentare un punto - ATTENZIONE, punto chiave
struct Point {
    int x;
    int y;
};

// Funzione per calcolare la distanza euclidea tra due punti - ci danno come si calcola la distanza quindi la implemento soltanto. Occhio alla notazione passando p dalla struct
double distance(struct Point p) {
    return sqrt(p.x * p.x + p.y * p.y);
}

// Funzione di comparazione per la qsort - Mette a confronto due punti e calcolo la distanza
int compare(const void* a, const void* b) {
    struct Point* p1 = (struct Point*)a;
    struct Point* p2 = (struct Point*)b;
    double dist1 = distance(*p1);
    double dist2 = distance(*p2);
    if (dist1 < dist2) return -1;
    if (dist1 > dist2) return 1;
    return 0;
}

int main() {
    int k = 3; // Numero di punti più vicini da trovare
    struct Point points[] = { {1, 2}, {-3, 4}, {5, 6}, {0, 0}, {8, 8} }; // Esempio di array di punti

    // Calcola il numero totale di punti nel vettore
    int numPoints = sizeof(points) / sizeof(points[0]);

    // Ordina i punti in base alla loro distanza dall'origine
    qsort(points, numPoints, sizeof(struct Point), compare);

    // Stampa i primi k punti come i più vicini all'origine
    printf("I %d punti più vicini all'origine sono:\n", k);
    for (int i = 0; i < k; i++) {
        printf("(%d, %d)\n", points[i].x, points[i].y);
    }

    return 0;
}


--------------APPROCCIO DIVIDE ET IMPERA----------- 
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// Definizione di una struttura per rappresentare un punto
struct Point {
    int x;
    int y;
};

// Funzione per calcolare la distanza euclidea tra due punti
double distance(struct Point p) {
    return sqrt(p.x * p.x + p.y * p.y);
}

// Funzione di partizione per l'algoritmo di selezione rapida
int partition(struct Point arr[], int left, int right) {
    struct Point pivot = arr[right];
    int i = left - 1;

    for (int j = left; j < right; j++) {
        if (distance(arr[j]) <= distance(pivot)) {
            i++;
            struct Point temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }

    struct Point temp = arr[i + 1];
    arr[i + 1] = arr[right];
    arr[right] = temp;

    return i + 1;
}

// Algoritmo di selezione rapida per trovare il k-esimo punto più vicino all'origine
void quickSelect(struct Point arr[], int left, int right, int k) {
    if (left <= right) {
        int pivotIndex = partition(arr, left, right);

        if (pivotIndex == k) {
            return;
        } else if (pivotIndex < k) {
            quickSelect(arr, pivotIndex + 1, right, k);
        } else {
            quickSelect(arr, left, pivotIndex - 1, k);
        }
    }
}

int main() {
    int k = 3; // Numero di punti più vicini da trovare
    struct Point points[] = { {1, 2}, {-3, 4}, {5, 6}, {0, 0}, {8, 8} }; // Esempio di array di punti

    // Calcola il numero totale di punti nel vettore
    int numPoints = sizeof(points) / sizeof(points[0]);

    // Trova i k punti più vicini all'origine
    quickSelect(points, 0, numPoints - 1, k);

    // Stampa i k punti più vicini all'origine
    printf("I %d punti più vicini all'origine sono:\n", k);
    for (int i = 0; i < k; i++) {
        printf("(%d, %d)\n", points[i].x, points[i].y);
    }

    return 0;
}
