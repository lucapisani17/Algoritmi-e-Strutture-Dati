APPROCCIO DIVIDE ET IMPERA


#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int value;
    int index;
} Pair;

void merge(Pair* arr, int left, int mid, int right, int* result) {
    int i = left;
    int j = mid + 1;
    int k = 0;

    while (i <= mid && j <= right) {
        if (arr[i].value > arr[j].value) {
            result[arr[i].index] += right - j + 1;
            i++;
        } else {
            j++;
        }
    }

    Pair* temp = (Pair*)malloc((right - left + 1) * sizeof(Pair));
    i = left;
    j = mid + 1;
    k = 0;

    while (i <= mid && j <= right) {
        if (arr[i].value <= arr[j].value) {
            temp[k++] = arr[i++];
        } else {
            temp[k++] = arr[j++];
        }
    }

    while (i <= mid) temp[k++] = arr[i++];
    while (j <= right) temp[k++] = arr[j++];

    for (int x = 0; x < k; x++) {
        arr[left + x] = temp[x];
    }

    free(temp);
}

void mergeSort(Pair* arr, int left, int right, int* result) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        mergeSort(arr, left, mid, result);
        mergeSort(arr, mid + 1, right, result);

        merge(arr, left, mid, right, result);
    }
}

int* countSmaller(int* nums, int numsSize, int* returnSize) {
    Pair* pairs = (Pair*)malloc(numsSize * sizeof(Pair));
    int* result = (int*)calloc(numsSize, sizeof(int));

    for (int i = 0; i < numsSize; i++) {
        pairs[i].value = nums[i];
        pairs[i].index = i;
    }

    mergeSort(pairs, 0, numsSize - 1, result);

    *returnSize = numsSize;
    free(pairs);
    return result;
}

int main() {
    int nums[] = {5, 2, 6, 1};
    int numsSize = sizeof(nums) / sizeof(nums[0]);

    int returnSize;
    int* result = countSmaller(nums, numsSize, &returnSize);

    printf("Counts: ");
    for (int i = 0; i < returnSize; i++) {
        printf("%d ", result[i]);
    }

    free(result);

    return 0;
}
