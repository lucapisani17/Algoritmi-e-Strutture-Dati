Given two integers m & n, find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.


Example 1:

Input: m = 10, n = 4
Output: 4
Explaination: There should be n elements and 
value of last element should be at-most m. 
The sequences are {1, 2, 4, 8}, {1, 2, 4, 9}, 
{1, 2, 4, 10}, {1, 2, 5, 10}.

Example 2:

Input: m = 5, n = 2
Output: 6
Explaination: The sequences are {1, 2}, 
{1, 3}, {1, 4}, {1, 5}, {2, 4}, {2, 5}.

Your Task:
You do not need to read input or print anything. Your task is to complete the function numberSequence() which takes the number m and n as input parameters and returns the number of sequences.


Expected Time Complexity: O(m*n)

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution{
public:
int numberSequence(int m, int n) {
    vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));

    for (int i = 1; i <= m; i++)
        dp[i][1] = 1;

    for (int i = 1; i <= m; i++) {
        for (int j = 2; j <= n; j++) {
            for (int k = i / 2; k <= i; k++) {
                dp[i][j] += dp[k][j - 1];
            }
        }
    }

    int result = 0;
    for (int i = 1; i <= m; i++)
        result += dp[i][n];

    return result;
}

int main() {
    int m1 = 10, n1 = 4;
    int result1 = numberSequence(m1, n1);
    cout << "Output for example 1: " << result1 << endl;

    int m2 = 5, n2 = 2;
    int result2 = numberSequence(m2, n2);
    cout << "Output for example 2: " << result2 << endl;

    return 0;
}
};
