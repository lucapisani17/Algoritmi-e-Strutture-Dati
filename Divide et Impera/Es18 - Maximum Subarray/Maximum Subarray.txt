//TRACCIA = Given an integer array nums, find the 
subarray
 with the largest sum, and return its sum.
APPROCCIO DIVIDE ET IMPERA SOTTO COMPLESSIT√Å O(n log n)


#include <stdio.h>

int maxSubArray(int* nums, int numsSize) {
    int maxSum = nums[0];
    int currentSum = nums[0];

    for (int i = 1; i < numsSize; i++) {
        currentSum = (currentSum + nums[i] > nums[i]) ? currentSum + nums[i] : nums[i];
        maxSum = (currentSum > maxSum) ? currentSum : maxSum;
    }

    return maxSum;
}

int main() {
    int nums[] = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
    int numsSize = sizeof(nums) / sizeof(nums[0]);
    
    int result = maxSubArray(nums, numsSize);

    printf("The maximum subarray sum is: %d\n", result);

    return 0;
}
-----------------------------------------------------------------
#include <stdio.h>

int max(int a, int b) {
    return (a > b) ? a : b;
}

int maxCrossingSum(int* nums, int low, int mid, int high) {
    int leftSum = -9999;
    int sum = 0;
    for (int i = mid; i >= low; i--) {
        sum += nums[i];
        if (sum > leftSum) {
            leftSum = sum;
        }
    }

    int rightSum = -9999;
    sum = 0;
    for (int i = mid + 1; i <= high; i++) {
        sum += nums[i];
        if (sum > rightSum) {
            rightSum = sum;
        }
    }

    return leftSum + rightSum;
}

int maxSubArrayRecursive(int* nums, int low, int high) {
    if (low == high) {
        return nums[low];
    }

    int mid = (low + high) / 2;

    return max(max(maxSubArrayRecursive(nums, low, mid), maxSubArrayRecursive(nums, mid + 1, high)),
               maxCrossingSum(nums, low, mid, high));
}

int maxSubArray(int* nums, int numsSize) {
    return maxSubArrayRecursive(nums, 0, numsSize - 1);
}

int main() {
    int nums[] = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
    int numsSize = sizeof(nums) / sizeof(nums[0]);
    
    int result = maxSubArray(nums, numsSize);

    printf("The maximum subarray sum is: %d\n", result);

    return 0;
}