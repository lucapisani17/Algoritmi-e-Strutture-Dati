Given a sorted and rotated array A of N distinct elements which are rotated at some point, and given an element K. The task is to find the index of the given element K in array A.

Example 1:

Input:
N = 9
A[] = {5,6,7,8,9,10,1,2,3}
K = 10
Output: 5
Explanation: 10 is found at index 5.
Example 1:

Input:
N = 3
A[] = {3,1,2}
K = 1
Output: 1
User Task:
Complete Search() function and return the index of the element K if found in the array. If the element is not present, then return -1.

Expected Time Complexity: O(log N).

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

int Search(int A[], int N, int K) {
    int left = 0;
    int right = N - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (A[mid] == K)
            return mid;

        if (A[left] <= A[mid]) {
            if (K >= A[left] && K <= A[mid])
                right = mid - 1;
            else
                left = mid + 1;
        } else {
            if (K >= A[mid] && K <= A[right])
                left = mid + 1;
            else
                right = mid - 1;
        }
    }

    return -1;
}

int main() {
    int arr1[] = {5, 6, 7, 8, 9, 10, 1, 2, 3};
    int N1 = sizeof(arr1) / sizeof(arr1[0]);
    int K1 = 10;
    int result1 = Search(arr1, N1, K1);
    cout << "Output for example 1: " << result1 << endl;

    int arr2[] = {3, 1, 2};
    int N2 = sizeof(arr2) / sizeof(arr2[0]);
    int K2 = 1;
    int result2 = Search(arr2, N2, K2);
    cout << "Output for example 2: " << result2 << endl;

    return 0;
}
